# -*- coding: utf-8 -*-
"""ASM_Project-Elections-2019-Twitter-Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JWIM7tP1l4Qux8aN-ZDXhdEthSuvqLi3

# Importing Modules
"""

!pip install geopandas

import warnings, re,math, datetime, time
start_time = time.time()
from datetime import timedelta
warnings.filterwarnings("ignore")
import math
import pandas as pd
import csv, io
import numpy as np
import scipy
import matplotlib
import matplotlib.pyplot as plt
import nltk, string
from nltk.corpus import stopwords
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import preprocessing
from sklearn.feature_extraction.text import CountVectorizer
from nltk.stem.snowball import SnowballStemmer
from sklearn.cluster import KMeans
from sklearn.metrics import adjusted_rand_score
import geopandas as gpd
from geopy import geocoders
gn = geocoders.GeoNames(username = "idselection")
import shapely
from shapely.geometry import Point, LineString, Polygon

from google.colab import drive
drive.mount('/content/drive')
import os
os.chdir('/content/drive/My Drive/ASM_Twitter_Project')

"""# Loading Election Dataset"""

#df = pd.read_csv(io.BytesIO(uploaded['Elections2019.csv']))
df = pd.read_csv("Elections2019.csv")
df.head()

"""# Dimensions"""

df.shape

"""# Displaying columns with NaN"""

df.isnull().sum()

"""# Attribute Data Types"""

df.dtypes

"""# Dropping unnecessary rows and columns

### We drop user_location since they are redundant and aren't useful and district since 95% is NaN
"""

df = df[pd.notnull(df['created_at'])]
df.dropna(subset=["full_text"], inplace = True)
df.drop("District", axis = 1, inplace =True)
df.drop("user_location", axis=1, inplace = True)
df.shape

"""# Removing US tweets

### The database also has US Congress tweets which must be removed
"""

usa_terms = ["usa", "united states", "trump", "america", "democrat","cia", "fbi", "nsa"]
for i in range(0,46043):
    try:
        flag = True
        x = df.loc[i,"full_text"]
        #print(x)
        for j in usa_terms:
            if j in str(x).lower():
                flag = False
                break
        if flag==False:
            df = df.drop(i)
    except:
        pass
df = df[df["Country"] != "Others"]

df.shape

"""# Replacing NaN values

### All missing values are replaced with default twitter values
"""

df["Country"].fillna("India", inplace=True)
df["retweet_count"].fillna(0, inplace=True)
df["quote_count"].fillna(0, inplace=True)
df["reply_count"].fillna(0, inplace=True)
df["favorite_count"].fillna(0, inplace=True)
df["State"].fillna("", inplace=True)
df["hashtags"].fillna("", inplace=True)
df["user_mentions_screen_name"].fillna("", inplace=True)
df["Country"]=df["Country"].replace("0","India") 
df["Country"]=df["Country"].replace("1","India")
df["Country"]=df["Country"].replace("2","India")
df["State"]=df["State"].replace("0","")
df["State"]=df["State"].replace("1","")
df["State"]=df["State"].replace("2","")
df["City"].fillna("", inplace=True)

df.head()

"""# Fixing Dates"""

lastupdate, created = [], []
for i in df["last_updated"]:
    lastupdate.append(datetime.datetime.strptime(i, "%d-%m-%Y %H:%M"))
for i in df["created_at"]:
    created.append(datetime.datetime.strptime(i, "%d-%m-%Y %H:%M"))

df["created_at"] = created
df["last_updated"] = lastupdate
df.drop(df[df['last_updated'] > datetime.datetime(2019,5,23,0,0)].index, inplace = True) 
df.drop(df[df['created_at'] > datetime.datetime(2019,5,23,0,0)].index, inplace = True)

df.head()

"""# Sorting Dataset by Dates"""

df = df.sort_values(by=['last_updated'])

df.head()

"""# New Dimensions after dropping rows and columns"""

df.shape

"""# Showing NaN"""

df.isnull().sum()

"""# Mapping Cities and States"""

capitals = dict(zip(
    ['Delhi', 'Karnataka', 'Andhra Pradesh', 'Maharashtra',
       'Punjab', 'Uttar Pradesh', 'Gujarat', 'Pondicherry', 'Jharkhand',
       'Chandigarh', 'Madhya Pradesh', 'West Bengal', 'Assam',
       'Jammu & Kashmir', 'Bihar', 'Haryana', 'Tamil Nadu', 'Orissa',
       'Chhattisgarh', 'Rajasthan', 'Uttaranchal', 'Telangana',
       'Daman & Diu', 'Meghalaya', 'Tripura', 'Kerala', 'Goa',
       'Himachal Pradesh', 'Manipur', 'Arunachal Pradesh', 'Lakshadweep',
       'Andaman & Nicobar Islands', 'Mizoram', 'Nagaland', 'Sikkim'],
                    
    ['New Delhi','Bangalore','Hyderabad','Mumbai','Chandigarh','Lucknow', 'Gandhinagar', 'Pondicherry',"Ranchi","Chandigarh",
         "Bhopal", "Kolkata", "Dispur", "Srinagar", "Patna", "Chandigarh", "Chennai", "Bhubaneswar", "Raipur",
        "Jaipur", "Dehradun", "Hyderabad", "Daman", "Shillong", "Agartala", "Trivandrum", "Panaji", "Shimla",
        "Imphal", "Itanagar", "Kavaratti", "Port Blair", "Aizawl", "Kohima","Gangtok"]))

"""# Replacing NULL cities to state capitals"""

for i in range(0,46044):
    try:
        if df["City"][i]=='':
            df["City"][i] = capitals[df["State"][i]]
    except:
        pass
df.head()

"""# Finding city name variations"""

d = {}
for i in df["City"]:
    #print("Checking for ",i)
    if i not in d:
        d[i]=set()
    for j in df["City"]:
        if(i in j and i!=''):
            d[i].add(j)
for i in d:
    if len(d[i])>1:
        print(i,d[i])

"""# Modifying variations of city names"""

df["City"]=df["City"].replace("Navi Mumbai","Mumbai")
df["City"]=df["City"].replace("Greater Mumbai","Mumbai")
df["City"]=df["City"].replace("Bokaro Steel City","Bokaro")
df["City"]=df["City"].replace("L.B. Nagar","Hyderabad")
df["City"]=df["City"].replace("Delhi Cantt.","New Delhi")
df["City"]=df["City"].replace("New Delhi Municipal Council","New Delhi")
df["City"]=df["City"].replace("Hyderabad M.Corp", "Hyderabad")
df["City"]=df["City"].replace("Tambaur-cum-Ahmadabad", "Ahmedabad")
df["City"]=df["City"].replace("Ahmedabad Cantonment", "Ahmedabad")
df["City"]=df["City"].replace('S.A.S. Nagar (Mohali)', "Mohali")
df["City"]=df["City"].replace('Panchkula Urban Estate', "Panchkula")
df["City"]=df["City"].replace('Mirzapur-cum-Vindhyachal', "Mirzapur")
df["City"]=df["City"].replace('Jawaharnagar (Gujarat Refinery)', "Jawaharnagar")
df["City"]=df["City"].replace('Jemari  (J.K. Nagar Township)', "Jemari")
df["City"]=df["City"].replace('Jam Jodhpur', "Jodhpur")
df["City"]=df["City"].replace('Bodh Gaya', "Gaya")
df["City"]=df["City"].replace('Chamoli Gopeshwar', "Gopeshwar")
df["City"]=df["City"].replace('English Bazar', "Malda")
df["City"]=df["City"].replace('G.C.F Jabalpur', "Jabalpur")
df["City"]=df["City"].replace('Ambikapur Part-X', "Ambikapur")
df["City"]=df["City"].replace('Azhikode South', "Azikode")
df["City"]=df["City"].replace('Bhagalpur (M.Corp)', "Bhagalpur")
df["City"]=df["City"].replace('Bad', "Badgam")
df["City"]=df["City"].replace('Badgam', "Budgam")
df["City"]=df["City"].replace('Nagar', "Anand Nagar")
df["City"]=df["City"].replace('Kalambe Turf Thane', "Thane")
df["City"]=df["City"].replace('Anand', "Anand Nagar")
df["City"]=df["City"].replace('North Lakhimpur', "Lakhimpur")
df["City"]=df["City"].replace('Chhota Udaipur', "Udaipur")
df["City"]=df["City"].replace('Balod', "Baloda")
df["City"]=df["City"].replace('Chandrapur Bagicha', "Chandrapur")

"""# Looking for City and State mistmatches"""

set(df["City"]).intersection(set(df["State"]))

"""# Setting columns with city as Bihar to Patna"""

for i in range(1,46044):
    try:
        if df["City"][i] == "Bihar":
            if df["City"][i] == "" or df["City"][i] not in capitals:
                df["City"][i] = "Patna"
                df["State"][i] = "Bihar"
            else:
                df["City"][i] = capitals[df["State"][i]]
    except:
        pass

"""# Resetting index values"""

df = df.reset_index()
df.drop("index", axis=1, inplace = True)

"""# Final Cleaned Dataset"""

df

"""# Final Dimensions"""

df.shape

"""# Inititalising Vectorizer, Sentiment Analyser and Stemmer"""

import nltk
nltk.download("vader_lexicon")
nltk.download("stopwords")
stemmer = SnowballStemmer('english')
vectorizer = TfidfVectorizer(use_idf = True, tokenizer = nltk.word_tokenize,stop_words='english', smooth_idf = True)
remove_punctuation_map = dict((ord(char), None) for char in string.punctuation)
sid = SentimentIntensityAnalyzer()
stopw = set(stopwords.words('english'))

"""# Text Preprocessing Unit"""

contraction = {"ain't": "is not", "aren't": "are not","can't": "cannot", 
                   "can't've": "cannot have", "'cause": "because", "could've": "could have", 
                   "couldn't": "could not", "couldn't've": "could not have","didn't": "did not", 
                   "doesn't": "does not", "don't": "do not", "hadn't": "had not", 
                   "hadn't've": "had not have", "hasn't": "has not", "haven't": "have not", 
                   "he'd": "he would", "he'd've": "he would have", "he'll": "he will", 
                   "he'll've": "he he will have", "he's": "he is", "how'd": "how did", 
                   "how'd'y": "how do you", "how'll": "how will", "how's": "how is", 
                   "I'd": "I would", "I'd've": "I would have", "I'll": "I will", 
                   "I'll've": "I will have","I'm": "I am", "I've": "I have", 
                   "i'd": "i would", "i'd've": "i would have", "i'll": "i will", 
                   "i'll've": "i will have","i'm": "i am", "i've": "i have", 
                   "isn't": "is not", "it'd": "it would", "it'd've": "it would have", 
                   "it'll": "it will", "it'll've": "it will have","it's": "it is", 
                   "let's": "let us", "ma'am": "madam", "mayn't": "may not", 
                   "might've": "might have","mightn't": "might not","mightn't've": "might not have", 
                   "must've": "must have", "mustn't": "must not", "mustn't've": "must not have", 
                   "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock", 
                   "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not",
                   "sha'n't": "shall not", "shan't've": "shall not have", "she'd": "she would", 
                   "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", 
                   "she's": "she is", "should've": "should have", "shouldn't": "should not", 
                   "shouldn't've": "should not have", "so've": "so have","so's": "so as", 
                   "this's": "this is",
                   "that'd": "that would", "that'd've": "that would have","that's": "that is", 
                   "there'd": "there would", "there'd've": "there would have","there's": "there is", 
                   "they'd": "they would", "they'd've": "they would have", "they'll": "they will", 
                   "they'll've": "they will have", "they're": "they are", "they've": "they have", 
                   "to've": "to have", "wasn't": "was not", "we'd": "we would", 
                   "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", 
                   "we're": "we are", "we've": "we have", "weren't": "were not", 
                   "what'll": "what will", "what'll've": "what will have", "what're": "what are", 
                   "what's": "what is", "what've": "what have", "when's": "when is", 
                   "when've": "when have", "where'd": "where did", "where's": "where is", 
                   "where've": "where have", "who'll": "who will", "who'll've": "who will have", 
                   "who's": "who is", "who've": "who have", "why's": "why is", 
                   "why've": "why have", "will've": "will have", "won't": "will not", 
                   "won't've": "will not have", "would've": "would have", "wouldn't": "would not", 
                   "wouldn't've": "would not have", "y'all": "you all", "y'all'd": "you all would",
                   "y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have",
                   "you'd": "you would", "you'd've": "you would have", "you'll": "you will", 
                   "you'll've": "you will have", "you're": "you are", "you've": "you have", "bharatiya janata party" : "bjp",
                   "inc" : "congress","@narendramodi":"modi", "pappu":"rahul gandhi","gandhi":"rahul gandhi", "@rahulgandhi":"Rahul Gandhi"}

def clean(text):
    text = text.lower()
    temp = ""
    for i in text.split():
        if i not in stopw:
            try:
                temp+=contraction[i]+' '
            except:
                temp+= i+' '
    text = temp.strip()
    text = re.sub(r'http\S+','', text)
    text = text.lower().translate(remove_punctuation_map)
    text = re.sub(r"[^A-Za-z0-9^,!.\/'+-=]", " ", text)
    text = re.sub(r"what's", "what is ", text)
    text = re.sub(r"\'s", " ", text)
    text = re.sub(r"\'ve", " have ", text)
    text = re.sub(r"n't", " not ", text)
    text = re.sub(r"i'm", "i am ", text)
    text = re.sub(r"\'re", " are ", text)
    text = re.sub(r"\'d", " would ", text)
    text = re.sub(r"\'ll", " will ", text)
    text = re.sub(r",", " ", text)
    text = re.sub(r"\.", " ", text)
    text = re.sub(r"!", " ! ", text)
    text = re.sub(r"\/", " ", text)
    text = re.sub(r"\^", " ^ ", text)
    text = re.sub(r"\+", " + ", text)
    text = re.sub(r"\-", " - ", text)
    text = re.sub(r"\=", " = ", text)
    text = re.sub(r"'", " ", text)
    text = re.sub(r"(\d+)(k)", r"\g<1>000", text)
    text = re.sub(r":", " : ", text)
    text = re.sub(r" e g ", " eg ", text)
    text = re.sub(r" b g ", " bg ", text)
    text = re.sub(r" u s ", " american ", text)
    text = re.sub(r"\0s", "0", text)
    text = re.sub(r" 9 11 ", "911", text)
    text = re.sub(r"e - mail", "email", text)
    text = re.sub(r"j k", "jk", text)
    text = re.sub(r"\s{2,}", " ", text)
    text = text.replace("bhartiya janata party",'bjp')
    text = text.replace("indian national congress", 'congress')
    text = text.replace("aam aadmi party", 'aap')
    text = text.replace("narendra modi", 'modi')
    text = text.replace("rahulgandhi", 'rahul gandhi')
    temp=''
    for i in text:
        if i.isdigit()==False:
            temp+=i
    text = temp
    text = text.split()
    stemmed_words = [stemmer.stem(word) for word in text]
    text = " ".join(stemmed_words)
    return text.strip()

"""# Cosine Similarity Function"""

'''def cosine_sim(text1, text2):
    tfidf = vectorizer.fit_transform([text1.strip(), text2.strip()])
    return ((tfidf * tfidfT.).A)[0,1]'''

"""# Preprocessing Tweets"""

preprocessed = []
for i in df["full_text"]:
    preprocessed.append(clean(i.strip().lower()))
preprocessed

"""# Inserting Processed Tweets"""

df.insert(4,"processed_tweet",preprocessed,True)
df.head()

"""# Finding most tagged twitter handles"""

df["user_mentions_screen_name"].value_counts()[:9]

"""# Processing Sentiment Scores"""

sentiment = {"Positive":[], "Negative" :[], "Neutral":[], "Compound":[]}
for i in df["processed_tweet"]:
    sentiment["Positive"].append(sid.polarity_scores(i)['pos'])
    sentiment["Negative"].append(sid.polarity_scores(i)['neg'])
    sentiment["Neutral"].append(sid.polarity_scores(i)['neu'])
    sentiment["Compound"].append(sid.polarity_scores(i)['compound'])

df.insert(9,"Neutral",sentiment['Neutral'],True)
df.insert(10,"Positive",sentiment['Positive'],True)
df.insert(11,"Negative",sentiment['Negative'],True)
df.insert(12,"Compound",sentiment['Compound'],True)

df.head()

"""# Summarising RT's, Quotes and Replies"""

df.loc[:,"quote_count":"retweet_count"].describe()

"""# Analysing Tweet Importance"""

imp = []
for i in range(0,39874):
    if df["retweet_count"][i]>=70 or sum([df["retweet_count"][i],df["quote_count"][i],df["reply_count"][i]])>=50:
        imp.append(1)
    else:
        imp.append(0)

df.insert(8,"Importance",imp,True)
df.head()

df["Importance"].value_counts()

plt.pie(df["Importance"].value_counts())
plt.show()

"""# Correlating Tweet Attributes"""

dfcorr = df.corr(method="pearson")

dfcorr

"""# Setting up Scoring Function"""

m11 = dfcorr["Compound"]["quote_count"]
m22 = dfcorr["Compound"]["reply_count"]
m33 = dfcorr["Compound"]["retweet_count"]
m44 = dfcorr["Compound"]["favorite_count"]
m55 = dfcorr["Compound"]["Importance"]

#Positive or compound?

m1 = dfcorr["Positive"]["quote_count"]
m2 = dfcorr["Positive"]["reply_count"]
m3 = dfcorr["Positive"]["retweet_count"]
m4 = dfcorr["Positive"]["favorite_count"]
m5 = dfcorr["Positive"]["Importance"]

score = lambda x1,x2,x3,x4,x5: m1*x1+m2*x2+m3*x3+m4*x4+x5
#score1 = lambda x1,x2,x3,x4,x5: m11*x1+m22*x2+m33*x3+m44*x4+x5

#Random test case
score(10,20,30,10,0)

score(10,20,30,10,1)

"""# Scoring Tweets"""

scores = []
for i in range(0,39874):
    qt = df["quote_count"][i]
    reply = df["reply_count"][i]
    rt = df["retweet_count"][i]
    fav = df["favorite_count"][i]
    imp = df["Importance"][i]
    scores.append(score(qt,reply,rt,fav,imp))

df["Score"] = scores

df.head()

"""# Classifying Tweets - Testing K-Means"""

'''X = vectorizer.fit_transform(df["processed_tweet"])
k =3
model = KMeans(n_clusters=2, init='k-means++', max_iter=100)
model.fit(X)'''

'''order_centroids = model.cluster_centers_.argsort()[:, ::-1]
terms = vectorizer.get_feature_names()
for i in range(2):
    print("Cluster %d:" % i),
    for ind in order_centroids[i, :10]:
        print(' %s' % terms[ind]),
    print'''

#Y = vectorizer.transform(['''A multitude of supporters from across the length and breath of Bihar came out to listen to Congress President Shri @RahulGandhi today. #RahulGandhiInBihar https://t.co/f0O9RfxAeM'''])
#prediction = model.predict(Y)
#print(prediction)'''

"""# Testing Cosine Similarity"""

'''compare = ["bjp modi chowkidar rss",
          "congress rahul gandhi sonia pappu"]
party1 = []
for tweet in df["processed_tweet"]:
    sim = []
    sim.append([cosine_sim(compare[0],tweet),"BJP"])
    sim.append([cosine_sim(compare[1],tweet),"Congress"])
    sim.sort(key = lambda x: x[0],reverse = True)
    max_sim = sim[0][0]
    max_party = sim[0][1]
    if max_sim>0.2:
        party1.append(max_party)
    else:
        party1.append("Other")'''

"""# Testing Frequency Classification"""

compare = ["vijay rajnath ravishankar  yudhvirsethi patra narendra modi vijayvargiyah sadhvi bjp arun manoj reddy sushma rsprasad taneja maneka udhavthackeray gautam gambhir piyush goyal nitin gadkari gadkariji rss singh vasundhraraje bjpbengal smriti kailash gautamgambhir swamy udhav sushmaswaraj sadhvi pragya vasundhra sambitpatra shivraj arunjaitley manohar parikar subramanianswamy naredra modi manojtiwari amit modiji yogi adityanath sushma swaraj nitin vivekreddy shivrajsinghchouhan vijayrupani amit shah narendramodi pragya arun jaitley thackeray sunny deol bharatiya janata party kailashvijayvargiyah adityanath yogi jaitley piyush gadkari sambit smritiirani rajnathsingh irani swaraj gautam parikar nirmala bhartiya janta party ram nirmala sitaraman modi shivrajsingh nititngadkari manohar rammadhav smriti irani yedyurappa madhav gambhir narendra rajnath singh subrmanian goyal chouhan amitshah sitaraman manoharparikar ravishankar prasad rupani rao shah ravishankarprasad narsimha vivek vijay rupani prasad bhartiya janata party giriraj chowkidar",
          "congress rahul gandhi sonia pappu manish tiwari mani shankar aiyar amrinder singh navjot sidhu pilot sachin jyotiraditya scindia ashok gehlot ajay makhan makhen chidambaram raj babbar sheila dikshit kamal nath digvijay singh sanjay kaul ashok chavan prithviraj randeep surjaewala hooda deepender kapil sibal manmohan ahmed patil natwar gaurav vallabh pawan khera taneja reddy george antony venugopal rao raman gogoi lalu prasad yadav akhilesh ravat urmila milind deora siddaramiah shivkumar dks sandeep ashok tanwar prakash jha"]
documents = df["processed_tweet"]
party = []
for i in documents:
    l = len(i.split())
    freq_bjp = 0
    freq_cong = 0
    for j in compare[0].split():
        freq_bjp+=i.count(j.strip())
    for j in compare[1].split():
        freq_cong+=i.count(j.strip())
    #print(freq_cong, freq_bjp)
    if freq_bjp>freq_cong:
        party.append("BJP")
    elif freq_cong>freq_bjp:
        party.append("Congress")
    else:
        party.append("Other")

"""# Checking Party Counts"""

party.count("Other")

party.count("BJP")

party.count("Congress")

plt.rcParams["figure.figsize"] = [6,6]
labels = ["BJP","Congress","Other"]
count = [party.count("BJP"),party.count("Congress"),party.count("Other")]
explode = (0.05,0.05,0.05)
patches, texts,autotexts = plt.pie(count,labels=labels, explode = explode,colors = ["orange","lightgreen","lightblue"], startangle=90, autopct='%1.1f%%',shadow = False, pctdistance=0.85)
centre_circle = plt.Circle((0,0),0.70,fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
# Equal aspect ratio ensures that pie is drawn as a circle
plt.axis('equal')  
plt.tight_layout()
plt.show()

"""# Inserting Party Attribute"""

df.insert(5,"Party",party)

df.head()

df["Party"].value_counts()

"""# Obtaining Time Intervals"""

time_sec = list(set(df["last_updated"]))
time_sec.sort()

time_day = set()
time_month = set()
for i in time_sec:
    time_day.add(i.date())
    time_month.add(i.month)
time_day = list(time_day)
time_day.sort()
time_month = list(time_month)
time_month.sort()

time_week = set()
time_fortnight = set()
result=time_day[0]
while result<= time_day[-1]:
    time_week.add(result)
    result+=timedelta(days=7)
time_week = list(time_week)
time_week.sort()

result = time_day[0]
while result<= time_day[-1]:
    time_fortnight.add(result)
    result+=timedelta(days=15)
time_fortnight = list(time_fortnight)
time_fortnight.sort()

all_hour = []
result = time_sec[0]
while result<= time_sec[-1]:
    all_hour.append((result.date(),result.hour))
    result+=timedelta(hours=1)

all_min = []
result = time_sec[0]
while result<= time_sec[-1]:
    all_min.append((result.date(),result.hour,result.minute))
    result+=timedelta(minutes=1)

"""# Popularity per Tweet"""

score_sec = {}
for t in time_sec:
    score_sec[t] = {"BJP":0,"Congress":0,"Other":0}
for i in range(0,39874):
    t = df["last_updated"][i]
    score_sec[t][df["Party"][i]]+=df["Compound"][i]
#print(score_min)

sec_total_bjp, sec_total_cong, sec_total_other = [],[],[]
for i in score_sec:
    try:
        sec_total_bjp.append(score_sec[i]["BJP"]+sec_total_bjp[-1])
    except IndexError:
        sec_total_bjp.append(score_sec[i]["BJP"]+0)

for i in score_sec:
    try:
        sec_total_cong.append(score_sec[i]["Congress"]+sec_total_cong[-1])
    except IndexError:
        sec_total_cong.append(score_sec[i]["Congress"]+0)

for i in score_sec:
    try:
        sec_total_other.append(score_sec[i]["Other"]+sec_total_other[-1])
    except IndexError:
        sec_total_other.append(score_sec[i]["Other"]+0)

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(0,4248)],sec_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(0,4248)],sec_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(0,4248)],sec_total_other,label = 'Other',color = 'black')
plt.style.use('fivethirtyeight')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

"""# Popularity per minute"""

score_min = {}
for t in all_min:
    score_min[t] = {"BJP":0,"Congress":0,"Other":0}
for i in range(0,39874):
    t = df["last_updated"][i]
    score_min[(t.date(),t.hour,t.minute)][df["Party"][i]]+=df["Compound"][i]

min_total_bjp, min_total_cong, min_total_other = [],[],[]
for i in score_min:
    try:
        min_total_bjp.append(score_min[i]["BJP"]+min_total_bjp[-1])
    except IndexError:
        min_total_bjp.append(score_min[i]["BJP"]+0)

for i in score_min:
    try:
        min_total_cong.append(score_min[i]["Congress"]+min_total_cong[-1])
    except IndexError:
        min_total_cong.append(score_min[i]["Congress"]+0)

for i in score_min:
    try:
        min_total_other.append(score_min[i]["Other"]+min_total_other[-1])
    except IndexError:
        min_total_other.append(score_min[i]["Other"]+0)

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(0,139741)],min_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(0,139741)],min_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(0,139741)],min_total_other,label = 'Other',color = 'black')
plt.style.use('fivethirtyeight')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

"""# Popularity per hour"""

score_hour = {}
for t in all_hour:
    score_hour[t] = {"BJP":0,"Congress":0,"Other":0}
for i in range(0,39874):
    t = df["last_updated"][i]
    score_hour[(t.date(),t.hour)][df["Party"][i]]+=df["Compound"][i]

hour_total_bjp, hour_total_cong, hour_total_other = [],[],[]
for i in score_hour:
    try:
        hour_total_bjp.append(score_hour[i]["BJP"]+hour_total_bjp[-1])
    except IndexError:
        hour_total_bjp.append(score_hour[i]["BJP"]+0)

for i in score_hour:
    try:
        hour_total_cong.append(score_hour[i]["Congress"]+hour_total_cong[-1])
    except IndexError:
        hour_total_cong.append(score_hour[i]["Congress"]+0)

for i in score_hour:
    try:
        hour_total_other.append(score_hour[i]["Other"]+hour_total_other[-1])
    except IndexError:
        hour_total_other.append(score_hour[i]["Other"]+0)

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(1,2331)],hour_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(1,2331)],hour_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(1,2331)],hour_total_other,label = 'Other',color = 'black')
plt.style.use('fivethirtyeight')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

"""# Per Day Popularity over 100 days"""

score_day = {}
all_days = []
result=time_day[0]
while result<= time_day[-1]:
    all_days.append(result)
    result+=timedelta(days=1)
#print(all_days)
for t in all_days:
    score_day[t] = {"BJP":0,"Congress":0,"Other":0}
for i in range(0,39874):
    t = df["last_updated"][i]
    score_day[t.date()][df["Party"][i]]+=df["Compound"][i]

day_total_bjp, day_total_cong, day_total_other = [],[],[]
for i in score_day:
    try:
        day_total_bjp.append(score_day[i]["BJP"]+day_total_bjp[-1])
    except IndexError:
        day_total_bjp.append(score_day[i]["BJP"]+0)

for i in score_day:
    try:
        day_total_cong.append(score_day[i]["Congress"]+day_total_cong[-1])
    except IndexError:
        day_total_cong.append(score_day[i]["Congress"]+0)

for i in score_day:
    try:
        day_total_other.append(score_day[i]["Other"]+day_total_other[-1])
    except IndexError:
        day_total_other.append(score_day[i]["Other"]+0)

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(0,98)],day_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(0,98)],day_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(0,98)],day_total_other,label = 'Other',color = 'black')
plt.style.use('ggplot')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

score_day = {}
all_days = []
result=time_day[0]
while result<= time_day[-1]:
    all_days.append(result)
    result+=timedelta(days=1)
#print(all_days)
for t in all_days:
    score_day[t] = {"BJP":0,"Congress":0,"Other":0}
for i in range(0,39874):
    t = df["last_updated"][i]
    score_day[t.date()][df["Party"][i]]+=df["Score"][i]

day_total_bjp, day_total_cong, day_total_other = [],[],[]
for i in score_day:
    try:
        day_total_bjp.append(score_day[i]["BJP"]+day_total_bjp[-1])
    except IndexError:
        day_total_bjp.append(score_day[i]["BJP"]+0)

for i in score_day:
    try:
        day_total_cong.append(score_day[i]["Congress"]+day_total_cong[-1])
    except IndexError:
        day_total_cong.append(score_day[i]["Congress"]+0)

for i in score_day:
    try:
        day_total_other.append(score_day[i]["Other"]+day_total_other[-1])
    except IndexError:
        day_total_other.append(score_day[i]["Other"]+0)

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(0,98)],day_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(0,98)],day_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(0,98)],day_total_other,label = 'Other',color = 'black')
plt.style.use('ggplot')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

"""# Weekly Popularity over 14 weeks"""

score_week = {}
for t in time_week:
    score_week[t] = {"BJP":0,"Congress":0,"Other":0}
last = time_day[0]
ctr = 0
while last<=all_days[-1]:
    if last in time_week:
        score_week[last]["BJP"] = day_total_bjp[ctr]
        score_week[last]["Congress"] = day_total_cong[ctr]
        score_week[last]["Other"] = day_total_other[ctr]
    last+= timedelta(days=1)
    ctr+=1

week_total_bjp, week_total_cong, week_total_other = [],[],[]
for i in score_week:
    week_total_bjp.append(score_week[i]["BJP"])
    week_total_cong.append(score_week[i]["Congress"])
    week_total_other.append(score_week[i]["Other"])

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(1,15)],week_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(1,15)],week_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(1,15)],week_total_other,label = 'Other',color = 'black')
plt.style.use('fivethirtyeight')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

"""# Fortnightly Popularity over 7 fortnights"""

score_fn = {}
for t in time_fortnight:
    score_fn[t] = {"BJP":0,"Congress":0,"Other":0}
last = time_day[0]
ctr = 0
while last<=all_days[-1]:
    if last in time_fortnight:
        score_fn[last]["BJP"] = day_total_bjp[ctr]
        score_fn[last]["Congress"] = day_total_cong[ctr]
        score_fn[last]["Other"] = day_total_other[ctr]
    last+= timedelta(days=1)
    ctr+=1

fn_total_bjp, fn_total_cong, fn_total_other = [],[],[]
for i in score_fn:
    fn_total_bjp.append(score_fn[i]["BJP"])
    fn_total_cong.append(score_fn[i]["Congress"])
    fn_total_other.append(score_fn[i]["Other"])

plt.rcParams["figure.figsize"] = [30,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(1,8)],fn_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(1,8)],fn_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(1,8)],fn_total_other,label = 'Other',color = 'black')
plt.style.use('fivethirtyeight')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

"""# Monthly Popularity over 4 months"""

score_month = {}
for t in time_month:
    score_month[t] = {"BJP":0,"Congress":0,"Other":0}
for i in range(0,39874):
    t = df["last_updated"][i].month
    score_month[t][df["Party"][i]]+=df["Compound"][i]

month_total_bjp, month_total_cong, month_total_other = [],[],[]
for i in score_month:
    try:
        month_total_bjp.append(score_month[i]["BJP"]+month_total_bjp[-1])
    except IndexError:
        month_total_bjp.append(score_month[i]["BJP"]+0)

for i in score_month:
    try:
        month_total_cong.append(score_month[i]["Congress"]+month_total_cong[-1])
    except IndexError:
        month_total_cong.append(score_month[i]["Congress"]+0)

for i in score_month:
    try:
        month_total_other.append(score_month[i]["Other"]+month_total_other[-1])
    except IndexError:
        month_total_other.append(score_month[i]["Other"]+0)

plt.rcParams["figure.figsize"] = [30,15]
plt.figure(num ='Lok Sabha')
plt.plot([i  for i in range(1,5)],month_total_bjp,label = 'BJP',color = 'orange')
plt.plot([i  for i in range(1,5)],month_total_cong,label = 'Congress',color = 'green')
plt.plot([i  for i in range(1,5)],month_total_other,label = 'Other',color = 'black')
plt.style.use('fivethirtyeight')
ax = plt.gca()
plt.grid(True)
plt.legend()
plt.show()
plt.close()

"""# Day wise Popularity per State"""

state_day_score = dict()
for i in set(list(df["State"])):
    if list(df["State"]).count(i)>500 and i!='':
        state_day_score[i]=dict()
        for t in all_days:
            state_day_score[i][t] = {"BJP":0,"Congress":0,"Other":0}

state_day_score["Other"]=dict()
for t in all_days:
            state_day_score["Other"][t] = {"BJP":0,"Congress":0,"Other":0}

for i in range(0,39874):
    t = df["last_updated"][i].date()
    st = df["State"][i]
    pty = df["Party"][i]
    cp = df["Compound"][i]
    if st in state_day_score:
            state_day_score[st][t][pty]+=cp
    else:
        state_day_score["Other"][t][pty]+=cp

state_popularity = dict()
for i in state_day_score:
    state_popularity[i] = {"BJP":[],"Congress":[],"Other":[]}

for st in state_day_score:
    for t in state_day_score[st]:
        try:
            state_popularity[st]["BJP"].append(state_day_score[st][t]["BJP"]+state_popularity[st]["BJP"][-1])
        except IndexError:
            state_popularity[st]["BJP"].append(state_day_score[st][t]["BJP"]+0)
            
for st in state_day_score:
    for t in state_day_score[st]:
        try:
            state_popularity[st]["Congress"].append(state_day_score[st][t]["Congress"]+state_popularity[st]["Congress"][-1])
        except IndexError:
            state_popularity[st]["Congress"].append(state_day_score[st][t]["Congress"]+0)

for st in state_day_score:
    for t in state_day_score[st]:
        try:
            state_popularity[st]["Other"].append(state_day_score[st][t]["Other"]+state_popularity[st]["Other"][-1])
        except IndexError:
            state_popularity[st]["Other"].append(state_day_score[st][t]["Other"]+0)

del state_popularity["Other"]

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
#colors = ["red","blue","orange","purple","green","violet","pink","black","lightblue","lightgreen","darkred","grey"]
ctr=0
for i in state_popularity:
    plt.plot([i  for i in range(0,98)],state_popularity[i]["BJP"],label = i)
    ctr+=1
plt.style.use('fivethirtyeight')
#plt.figure(figsize=(20,20))
plt.title("Popularity of BJP over Time")
ax = plt.gca()
plt.grid(True)
plt.legend( loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

state_day_score = dict()
for i in set(list(df["State"])):
    if list(df["State"]).count(i)>500 and i!='':
        state_day_score[i]=dict()
        for t in all_days:
            state_day_score[i][t] = {"BJP":0,"Congress":0,"Other":0}

state_day_score["Other"]=dict()
for t in all_days:
            state_day_score["Other"][t] = {"BJP":0,"Congress":0,"Other":0}

for i in range(0,39874):
    t = df["last_updated"][i].date()
    st = df["State"][i]
    pty = df["Party"][i]
    cp = df["Score"][i]
    if st in state_day_score:
            state_day_score[st][t][pty]+=cp
    else:
        state_day_score["Other"][t][pty]+=cp

state_popularity = dict()
for i in state_day_score:
    state_popularity[i] = {"BJP":[],"Congress":[],"Other":[]}

for st in state_day_score:
    for t in state_day_score[st]:
        try:
            state_popularity[st]["BJP"].append(state_day_score[st][t]["BJP"]+state_popularity[st]["BJP"][-1])
        except IndexError:
            state_popularity[st]["BJP"].append(state_day_score[st][t]["BJP"]+0)
            
for st in state_day_score:
    for t in state_day_score[st]:
        try:
            state_popularity[st]["Congress"].append(state_day_score[st][t]["Congress"]+state_popularity[st]["Congress"][-1])
        except IndexError:
            state_popularity[st]["Congress"].append(state_day_score[st][t]["Congress"]+0)

for st in state_day_score:
    for t in state_day_score[st]:
        try:
            state_popularity[st]["Other"].append(state_day_score[st][t]["Other"]+state_popularity[st]["Other"][-1])
        except IndexError:
            state_popularity[st]["Other"].append(state_day_score[st][t]["Other"]+0)

del state_popularity["Other"]

plt.rcParams["figure.figsize"] = [20,15]
plt.figure(num ='Lok Sabha')
#colors = ["red","blue","orange","purple","green","violet","pink","black","lightblue","lightgreen","darkred","grey"]
ctr=0
for i in state_popularity:
    plt.plot([i  for i in range(0,98)],state_popularity[i]["BJP"],label = i)
    ctr+=1
plt.style.use('fivethirtyeight')
#plt.figure(figsize=(20,20))
plt.title("Popularity of BJP over Time")
ax = plt.gca()
plt.grid(True)
plt.legend( loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [20,15]
for i in state_popularity:
    plt.plot([i  for i in range(0,98)],state_popularity[i]["Congress"],label = i)
plt.style.use('fivethirtyeight')
#plt.figure(figsize=(20,20))
plt.title("Popularity of Congress over Time")
ax = plt.gca()
plt.grid(True)
plt.legend( loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [20,15]
for i in state_popularity:
    plt.plot([i  for i in range(0,98)],state_popularity[i]["Congress"],label = i)
plt.style.use('fivethirtyeight')
#plt.figure(figsize=(20,20))
plt.title("Popularity of Congress over Time")
ax = plt.gca()
plt.grid(True)
plt.legend( loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [20,15]
for i in state_popularity:
    plt.plot([i  for i in range(0,98)],state_popularity[i]["Other"],label = i)
plt.style.use('fivethirtyeight')
#plt.figure(figsize=(20,20))
ax = plt.gca()
plt.grid(True)
plt.title("Popularity of Other Parties over Time")
plt.legend( loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show() 
plt.close()

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [20,15]
for i in state_popularity:
    plt.plot([i  for i in range(0,98)],state_popularity[i]["Other"],label = i)
plt.style.use('fivethirtyeight')
#plt.figure(figsize=(20,20))
ax = plt.gca()
plt.grid(True)
plt.title("Popularity of Other Parties over Time")
plt.legend( loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show() 
plt.close()

# Plotting Final Popularity before Results

plt.rcParams["figure.figsize"] = [6,6]
x = matplotlib.pyplot.bar(["BJP","Congress","Other"],[max(day_total_bjp),max(day_total_cong),max(day_total_other)],width=0.3,color=["Orange","green","grey"])
plt.legend([x[0],x[1],x[2]],["BJP","Congress","Other"])
plt.title("Final Popularity Index")

states = list(set(list(df["State"])))
states.remove("")

"""# Most tweeted from States"""

state_count = dict(df["State"].value_counts())
del state_count[""]
state_count["Other"] = 0
most_state_count = dict()
most_state_count["Other"] =0

for i in state_count:
    if state_count[i]<150:
        most_state_count["Other"]+=state_count[i]
    else:
        most_state_count[i] = state_count[i]

plt.rcParams["figure.figsize"] = [30,15]
del most_state_count["Other"]
plt.style.use('fivethirtyeight')
fig = plt.bar(list(most_state_count.keys()),list(most_state_count.values()),width = 0.8)
plt.title("Most Tweeted from States")

fp1 = r"IND_adm1.shp"
map_df1 = gpd.read_file(fp1)

count = dict(df["State"].value_counts())
states = list(count.keys())
states.remove("")

geo=[]
for i in states:
    for j in range(0,36):
        name1 = i
        name2 = map_df1["NAME_1"][j]
        if(name1==name2):
            geo.append(map_df1["geometry"][j])
            break
        elif len(set(name1.split()).intersection(set(name2.split())))>1:
            geo.append(map_df1["geometry"][j])
            break
        elif name2=="Puducherry" and name1 == "Pondicherry":
            geo.append(map_df1["geometry"][j])
            break

bjp,cong,other,party,tweets,bjppop,congpop,opop=[],[],[],[],[],[],[],[]
partycount = dict()
for i in states:
    partycount[i] = {"BJP":0,"Congress":0,"Other":0,"BJPPop":0,"CongPop":0,"OtherPop":0,
                     'narendramodi':0,'bjp4india':0,'incindia':0,'rahulgandhi':0,
                    "htmodi":0,'htbjp':0,'htloksabha':0,'htcong':0,'htrahulgandhi':0,'htchow':0}

for i in range(0,39874):
    p = df["Party"][i]
    s = df["State"][i]
    cp = df["Compound"][i]
    temp = df["hashtags"][i]
    user = df["user_mentions_screen_name"][i]
    if s=="":
        continue
    partycount[s][p]+=1
    if p=="BJP":
        partycount[s]["BJPPop"]+=cp
    if p=="Congress":
        partycount[s]["CongPop"]+=cp
    if p=="Other":
        partycount[s]["OtherPop"]+=cp
    for hst in temp.split(','):
        if hst =="BJP":
            partycount[s]['htbjp']+=1
        if hst =="Modi":
            partycount[s]['htmodi']+=1
        if hst =="LokSabhaElections2019":
            partycount[s]['htloksabha']+=1
        if hst =="Congress":
            partycount[s]['htcong']+=1
        if hst =="RahulGandhi":
            partycount[s]['htrahulgandhi']+=1
        if hst =="MainBhiChowkidar":
            partycount[s]['htchow']+=1
    for x in user.split(','):
        if x=="BJP4India":
            partycount[s]['bjp4india']+=1
        if x=="narendramodi":
            partycount[s]['narendramodi']+=1
        if x=="INCIndia":
            partycount[s]['incindia']+=1
        if x=="RahulGandhi":
            partycount[s]['rahulgandhi']+=1

htbjp,htmodi,htls,htcong,htrg,htchow = [],[],[],[],[],[]
hdbjp,hdmodi,hdcong,hdrg=[],[],[],[]

for i in partycount:
    bjp.append(partycount[i]["BJP"])
    cong.append(partycount[i]["Congress"])
    other.append(partycount[i]["Other"])
    tweets.append(partycount[i]["BJP"]+partycount[i]["Congress"]+partycount[i]["Other"])
    bjppop.append(partycount[i]["BJPPop"])
    congpop.append(partycount[i]["CongPop"])
    opop.append(partycount[i]["OtherPop"])
    
    htbjp.append(partycount[i]['htbjp'])
    htmodi.append(partycount[i]['htmodi'])
    htls.append(partycount[i]['htloksabha'])
    htcong.append(partycount[i]['htcong'])
    htrg.append(partycount[i]['htrahulgandhi'])
    htchow.append(partycount[i]['htchow'])
    
    hdbjp.append(partycount[i]['bjp4india'])
    hdmodi.append(partycount[i]['narendramodi'])
    hdcong.append(partycount[i]['incindia'])
    hdrg.append(partycount[i]['rahulgandhi'])
    
    if partycount[i]["BJPPop"]>partycount[i]["CongPop"] and partycount[i]["BJPPop"]>partycount[i]["OtherPop"]:
        party.append("BJP")
    elif partycount[i]["BJPPop"]<partycount[i]["CongPop"] and partycount[i]["OtherPop"]<partycount[i]["CongPop"]:
        party.append("Congress")
    else:
        party.append("Other")

testdf = pd.DataFrame({"State":states,"Tweets":tweets,"Geo":geo,"Party":party,"BJP":bjp,"Congress":cong,"Other":other,
                      "BJPPop":bjppop,"Congpop":congpop,"OtherPop":opop,
                      "#BJP":htbjp,"#Modi":htmodi,"#LokSabhaElections2019":htls,"#Congress":htcong,"#RahulGandhi":htrg,"#MainBhiChowkidar":htchow,
                      "@BJP4India":hdbjp,"@narendramodi":hdmodi,"@INCIndia":hdcong,"@RahulGandhi":hdrg})
testdf.head()

gdf = gpd.GeoDataFrame(testdf, geometry="Geo")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="Tweets",legend = True)
plt.title("Most Tweeted from States")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="BJP",legend = True,cmap="Reds")
plt.title("States tweeting about BJP")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="Congress",legend = True,cmap="Greens")
plt.title("States tweeting about Congress")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="Other",legend = True,cmap = "Blues")
plt.title("States tweeting about Other Parties")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="Party",legend = True,cmap="inferno")
plt.title("Popularity Trend Across States")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="BJPPop",cmap="Reds",legend = True)
plt.title("BJP Popularity")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="Congpop",cmap="Greens",legend = True)
plt.title("Congress Popularity")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
gdf.plot(column="OtherPop",cmap="Blues",legend = True)
plt.title("Other Party Popularity")
plt.show()

"""# Most Tweeted from Cities"""

city_count = dict(df["City"].value_counts())
city_count["Other"] = 0
del city_count[""]
most_city_count = dict()
most_city_count["Other"] = 0

for i in city_count:
    if city_count[i]<200:
        most_city_count["Other"]+=city_count[i]
    else:
        most_city_count[i] = city_count[i]

del most_city_count["Other"]
plt.rcParams["figure.figsize"] = [30,15]
plt.style.use('fivethirtyeight')
fig = plt.bar(list(most_city_count.keys()),list(most_city_count.values()),width = 0.8)
plt.title("Most Tweeted from Cities")

"""# Most Popular Hashtags"""

hashtags = []
for i in list(df["hashtags"]):
    x = i.split(',')
    for j in x:
        hashtags.append(j)
hashdata = [i for i in hashtags if i!=""]

hash_count = dict()
hash_count["Other"] = 0
for i in set(hashtags):
    x = hashtags.count(i)
    if x<60: #70 is best count
        hash_count["Other"]+= x
    else:
        hash_count[i] = x
del hash_count[""]
del hash_count["Other"]

plt.rcParams["figure.figsize"] = [30,15]
fig = plt.bar(list(hash_count.keys()),list(hash_count.values()),width = 0.5)
plt.title("Most Popular Hashtags")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="#BJP",legend = True,cmap="Reds")
plt.title("#BJP")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="#Modi",legend = True,cmap="Reds")
plt.title("#Modi")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="#Congress",legend = True,cmap="Greens")
plt.title("#Congress")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="#RahulGandhi",legend = True,cmap="Greens")
plt.title("#RahulGandhi")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="#MainBhiChowkidar",legend = True,cmap="Reds")
plt.title("#MainBhiChowkidar")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="#LokSabhaElections2019",legend = True)
plt.title("#LokSabhaElections2019")

"""# Most Tagged Handles"""

handles = []
for i in df["user_mentions_screen_name"]:
    x = i.split(',')
    for j in x:
        handles.append(j)
handles = [i for i in handles if i!=""]

handle_count = dict()
handle_count["Other"] = 0
for i in set(handles):
    x = handles.count(i)
    if x<120:
        handle_count["Other"]+= x
    else:
        handle_count[i] = x
#del handle_count[""]
del handle_count["Other"]

plt.rcParams["figure.figsize"] = [20,10]
fig = plt.bar(list(handle_count.keys()),list(handle_count.values()),width = 0.8)
plt.title("Most Tagged Handles")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="@narendramodi",legend = True,cmap="Reds")
plt.title("People tagging @Modi")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="@BJP4India",legend = True,cmap="Reds")
plt.title("People tagging @BJP4India")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="@INCIndia",legend = True,cmap="Greens")
plt.title("People tagging @Congress")

plt.style.use('default')
plt.rcParams["figure.figsize"] = [10,5]
gdf.plot(column="@RahulGandhi",legend = True,cmap="Greens")
plt.title("People tagging @RahulGandhi")

"""# Frequency of Tweets per Day"""

tweets_per_day = dict()
for i in all_days:
    tweets_per_day[i]=0
for i in range(0,39874):
    tweets_per_day[df["last_updated"][i].date()]+=1

temp = dict()
for i in tweets_per_day:
    if tweets_per_day[i]!=0:
        temp[i] = tweets_per_day[i]
        #tweets_per_day[i] = tweets_per_day[i-timedelta(days=1)]     
tweets_per_day = temp

plt.rcParams["figure.figsize"] = [15,10]
plt.plot([i  for i in range(len(tweets_per_day.keys()))],list(tweets_per_day.values()))
plt.style.use('fivethirtyeight')
#plt.figure(figsize=(20,20))
ax = plt.gca()
plt.grid(True)
plt.title("Frequency of Tweets per Day")
#plt.legend( loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

"""# Tagging Frequency over Time"""

ht = ["narendramodi","BJP4India","RahulGandhi","INCIndia"]
ht_time = dict()
for i in all_days:
    ht_time[i] = {"narendramodi":0,"BJP4India":0,"RahulGandhi":0,"INCIndia":0}

for i in range(0,39874):
    t = df["last_updated"][i].date()
    temp = df["user_mentions_screen_name"][i].split(',')
    for j in temp:
        if j in ht:
            ht_time[t][j]+=1

modi_tag1 = []
bjp_tag1 = []
rahulgandhi_tag1 = []
cong_tag1 = []
modi_tag2 = []
bjp_tag2 = []
rahulgandhi_tag2 = []
cong_tag2 = []

for t in ht_time:
    temp = ht_time[t]
    try:
        modi_tag1.append(temp["narendramodi"])
        modi_tag2.append(modi_tag2[-1]+temp["narendramodi"])
    except:
        modi_tag2.append(0+temp["narendramodi"])
        
for t in ht_time:
    temp = ht_time[t]
    try:
        bjp_tag1.append(temp["BJP4India"])
        bjp_tag2.append(bjp_tag2[-1]+temp["BJP4India"])
    except:
        bjp_tag2.append(0+temp["BJP4India"])
        
for t in ht_time:
    temp = ht_time[t]
    try:
        rahulgandhi_tag1.append(temp["RahulGandhi"])
        rahulgandhi_tag2.append(rahulgandhi_tag2[-1]+temp["RahulGandhi"])
    except:
        rahulgandhi_tag2.append(0+temp["RahulGandhi"])
        
for t in ht_time:
    temp = ht_time[t]
    try:
        cong_tag1.append(temp["INCIndia"])
        cong_tag2.append(cong_tag2[-1]+temp["INCIndia"])
    except:
        cong_tag2.append(0+temp["INCIndia"])
        
        
tagged_scores = {"narendramodi":[modi_tag1,modi_tag2],"BJP4India":[bjp_tag1,bjp_tag2],
                "RahulGandhi":[rahulgandhi_tag1,rahulgandhi_tag2],"INCIndia":[cong_tag1,cong_tag2]}

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [15,10]
for i in ht:
    plt.plot([i  for i in range(0,98)],tagged_scores[i][0],label = i)
plt.style.use('fivethirtyeight')
plt.title("Frequency of Tagging")
plt.grid(True)
ax = plt.gca()
plt.legend(loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [15,5]
for i in ht:
    plt.plot([i  for i in range(0,98)],tagged_scores[i][1],label = i)
plt.style.use('fivethirtyeight')
plt.title("Popularity of Handles over Time")
plt.grid(True)
ax = plt.gca()
plt.legend(loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

"""# Discrete Probabilites"""

vote_score = dict()
for i in all_days:
  vote_score[i] = {"bjp_votes":0, "cong_votes":0, "other_votes":0, "cong_coal":0, "bjp_coal":0,"total":0}
#bjp_votes, cong_votes, other_votes, cong_coal, bjp_coal = [0 for i in range(5)]
total = 0
for i in range(0,39874):
  t = df["last_updated"][i].date()
  party = df["Party"][i]
  score = df["Score"][i]
  scoreadd=1
  if party=="BJP":
    if score>0:
      vote_score[t]["bjp_votes"]+=scoreadd
      vote_score[t]["total"]+=1
    else:
      if score >=-0.4 and score <=0:
        vote_score[t]["cong_coal"]+=scoreadd
        vote_score[t]["total"]+=1
      else:
        vote_score[t]["cong_votes"]+=scoreadd
        vote_score[t]["total"]+=1
  elif party=="Congress":
    if score>0:
      vote_score[t]["cong_votes"]+=scoreadd
      vote_score[t]["total"]+=1
    else:
      if score >=-0.4 and score <=0:
        vote_score[t]["bjp_coal"]+=scoreadd
        vote_score[t]["total"]+=1
      else:
        vote_score[t]["bjp_votes"]+=scoreadd
        vote_score[t]["total"]+=1
  else:
    if score>0:
      vote_score[t]["other_votes"]+=scoreadd
      vote_score[t]["total"]+=1
    elif score >=-0.4 and score <=0:
      if vote_score[t]["bjp_votes"]>vote_score[t]["cong_votes"]:
        vote_score[t]["bjp_coal"]+=scoreadd
        vote_score[t]["total"]+=1
      else:
        vote_score[t]["cong_coal"]+=scoreadd
        vote_score[t]["total"]+=1

vote_bjp1, vote_cong1, vote_other1, vote_bjp_coal1, vote_cong_coal1 = [],[],[],[],[]
vote_bjp2, vote_cong2, vote_other2, vote_bjp_coal2, vote_cong_coal2 = [],[],[],[],[]
temp = dict()
for i in vote_score:
    if vote_score[i]["total"]!=0:
        temp[i] = vote_score[i]
vote_score=temp
for t in vote_score:
  if vote_score[t]['total']==0:
    continue
  vote_bjp1.append((vote_score[t]["bjp_votes"]/vote_score[t]["total"]))
  try:
    vote_bjp2.append((vote_score[t]["bjp_votes"]+vote_bjp2[-1])/(vote_score[t]["total"]+vote_score[t-timedelta(days=1)]["total"]))
  except:
    vote_bjp2.append((vote_score[t]["bjp_votes"]/vote_score[t]["total"]))

for t in vote_score:
  if vote_score[t]['total']==0:
    continue
  vote_cong1.append((vote_score[t]["cong_votes"]/vote_score[t]["total"]))
  try:
    vote_cong2.append((vote_score[t]["cong_votes"]+vote_cong2[-1])/(vote_score[t]["total"]+vote_score[t-timedelta(days=1)]["total"]))
  except:
    vote_cong2.append((vote_score[t]["cong_votes"]/vote_score[t]["total"]))

for t in vote_score:
  if vote_score[t]['total']==0:
    continue
  vote_other1.append((vote_score[t]["other_votes"]/vote_score[t]["total"]))
  try:
    vote_other2.append((vote_score[t]["other_votes"]+vote_other2[-1])/(vote_score[t]["total"]+vote_score[t-timedelta(days=1)]["total"]))
  except:
    vote_other2.append((vote_score[t]["other_votes"]/vote_score[t]["total"]))

for t in vote_score:
  if vote_score[t]['total']==0:
    continue
  vote_bjp_coal1.append((vote_score[t]["bjp_coal"]/vote_score[t]["total"]))
  try:
    vote_bjp_coal2.append((vote_score[t]["bjp_coal"]+vote_bjp_coal2[-1])/(vote_score[t]["total"]+vote_score[t-timedelta(days=1)]["total"]))
  except:
    vote_bjp_coal2.append((vote_score[t]["bjp_coal"]/vote_score[t]["total"]))

for t in vote_score:
  if vote_score[t]['total']==0:
    continue
  vote_cong_coal1.append((vote_score[t]["cong_coal"]/vote_score[t]["total"]))
  try:
    vote_cong_coal2.append((vote_score[t]["cong_coal"]+vote_cong_coal2[-1])/(vote_score[t]["total"]+vote_score[t-timedelta(days=1)]["total"]))
  except:
    vote_cong_coal2.append((vote_score[t]["cong_coal"]/vote_score[t]["total"]))

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [15,5]
labels = ["BJP","Congress","Other","BJP Coalition","Congress Coalition"]
x = [vote_bjp1, vote_cong1, vote_other1, vote_bjp_coal1, vote_cong_coal1]
for i in x:
    plt.plot([j  for j in range(len(i))],i,label= labels[x.index(i)])
plt.style.use('fivethirtyeight')
plt.title("Winning Probability")
plt.grid(True)
ax = plt.gca()
plt.legend(loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

plt.figure(num ='Lok Sabha')
plt.rcParams["figure.figsize"] = [15,5]
labels = ["BJP","Congress","Other","BJP Coalition","Congress Coalition"]
x = [vote_bjp2,vote_cong2, vote_other2, vote_bjp_coal2, vote_cong_coal2]
for i in x:
    plt.plot([j  for j in range(len(i))],i,label = labels[x.index(i)])
plt.style.use('fivethirtyeight')
plt.title("Chances of Winning")
plt.grid(True)
ax = plt.gca()
plt.legend(loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()
plt.close()

"""# Poisson"""

poisson = dict()
for i in all_days:
    poisson[i] = {"bjp":0,"cong":0,"other":0,"bjp_coal":0,"cong_coal":0}
for t in vote_score:
    poisson[t]["bjp"]=vote_score[t]["bjp_votes"]
    poisson[t]["cong"]=vote_score[t]["cong_votes"]
    poisson[t]["other"]=vote_score[t]["other_votes"]
    poisson[t]["bjp_coal"]=vote_score[t]["bjp_coal"]
    poisson[t]["cong_coal"]=vote_score[t]["cong_coal"]

finalposisson = {"bjp":0,"cong":0,"other":0,"bjp_coal":0,"cong_coal":0}
for t in poisson:
    finalposisson["bjp"]+=poisson[t]["bjp"]
    finalposisson["cong"]+=poisson[t]["cong"]
    finalposisson["other"]+=poisson[t]["other"]
    finalposisson["bjp_coal"]+=poisson[t]["bjp_coal"]
    finalposisson["cong_coal"]+=poisson[t]["cong_coal"]

l = len(list(poisson.keys()))
for i in finalposisson:
    finalposisson["bjp"]/=98
    finalposisson["cong"]/=98
    finalposisson["other"]/=98
    finalposisson["bjp_coal"]/=98
    finalposisson["cong_coal"]/=98

finalposisson

from math import e,factorial

poissondist = []
y1,y2,y3,y4,y5 = [],[],[],[],[]
lam1 = finalposisson["bjp"]
lam2 = finalposisson["cong"]
lam3 = finalposisson["other"]
lam4 = finalposisson["bjp_coal"]
lam5 = finalposisson["cong_coal"]
for i in range(0,98):
    y1.append((((e**(-lam1))*(lam1**i))/factorial(i)))
    y2.append((((e**(-lam2))*(lam2**i))/factorial(i)))
    y3.append((((e**(-lam3))*(lam3**i))/factorial(i)))
    y4.append((((e**(-lam4))*(lam4**i))/factorial(i)))
    y5.append((((e**(-lam5))*(lam5**i))/factorial(i)))

plt.rcParams["figure.figsize"] = [5,5]
plt.plot(y1,[i for i in range(0,98)],color = 'red')
ax = plt.gca()
plt.legend(loc='best', bbox_to_anchor=(1, 0,0.2, 1.02))
plt.show()

plt.plot(y2,[i for i in range(0,98)],color= 'blue')
plt.plot(y3,[i for i in range(0,98)])
plt.plot(y4,[i for i in range(0,98)])
plt.plot(y5,[i for i in range(0,98)])

"""# Mood Plots"""

import pandas as pd
filepath="NRC-Emotion-Lexicon-Wordlevel-v0.92.txt"
emolex_df=pd.read_csv(filepath,  names=["word", "emotion", "association"], skiprows=45, sep='\t')
emolex_df.head(15)
# !ls

emotions={'BJP':{'positive':0, 'negative':0, 'surprise':0,'sadness':0,'anger':0,'joy':0,'negative':0,'trust':0,'fear':0,'anticipation':0,'disgust':0}, 
          'Congress':{'positive':0, 'negative':0,  'surprise':0,'sadness':0,'anger':0,'joy':0,'negative':0,'trust':0,'fear':0,'anticipation':0,'disgust':0},
          'Other':{'positive':0, 'negative':0,  'surprise':0,'sadness':0,'anger':0,'joy':0,'negative':0,'trust':0,'fear':0,'anticipation':0,'disgust':0}}

word_emotion=dict()
for i in range(0,141776):
    emotion=emolex_df['emotion'][i]
    word=emolex_df['word'][i]
    association=emolex_df['association'][i]
    
    if word not in word_emotion:
        word_emotion[word]=dict()
    word_emotion[word][emotion]=association

for i in range(0,39874):
    party=df['Party'][i]
    text=df['full_text'][i]
    for j in text.split():
        if j in word_emotion:
            for k in word_emotion[j]:
                emotions[party][k]+=word_emotion[j][k]

df.head()

emotions

plt.style.use('fivethirtyeight')
plt.rcParams["figure.figsize"] = [15,5]
plt.bar(list(emotions['BJP'].keys()),list(emotions['BJP'].values()))
plt.show()

plt.bar(list(emotions['Congress'].keys()),list(emotions['Congress'].values()))
plt.rcParams["figure.figsize"] = [15,5]
plt.show()

plt.bar(list(emotions['Other'].keys()),list(emotions['Other'].values()))
plt.rcParams["figure.figsize"] = [15,5]
plt.show()

plt.rcParams["figure.figsize"] = [15,5]
for i in emotions:
    plt.bar(list(emotions[i].keys()),list(emotions[i].values()))

plt.bar(['BJP','Congress','Other'],[emotions['BJP']['anger'],emotions['Congress']['anger'],emotions['Other']['anger']])
plt.rcParams["figure.figsize"] = [15,5]

for i in ['anger','joy','fear','trust']:
    plt.bar(['BJP','Congress','Other'],[emotions['BJP'][i],emotions['Congress'][i],emotions['Other'][i]])
    plt.show()

most_state_count

state_mood=dict()
for i in list(most_state_count.keys()):
    state_mood[i]={'positive':0, 'negative':0, 'surprise':0,'sadness':0,'anger':0,'joy':0,'negative':0,'trust':0,'fear':0,'anticipation':0,'disgust':0}

for i in range(0,39874):
    party=df['State'][i]
    text=df['full_text'][i]
    if party not in list(most_state_count.keys()):
        continue
    for j in text.split():
        if j in word_emotion:
            for k in word_emotion[j]:
                state_mood[party][k]+=word_emotion[j][k]

state_mood

plt.bar(list(state_mood['Maharashtra'].keys()),list(state_mood['Maharashtra'].values()))
plt.rcParams["figure.figsize"] = [15,5]
plt.show()

map_df1.tail()

geo=[]
for i in list(most_state_count.keys()):
   for j in range(0,36):
       name1 = i
       name2 = map_df1["NAME_1"][j]
       if(name1==name2):
           geo.append(map_df1["geometry"][j])
           break
       elif len(set(name1.split()).intersection(set(name2.split())))>1:
           geo.append(map_df1["geometry"][j])
           break
       elif name2=="Puducherry" and name1 == "Pondicherry":
           geo.append(map_df1["geometry"][j])
           break

emo_dict={'positive':[],'negative':[],'anger':[],'joy':[],'trust':[],'sadness':[],'surprise':[],'fear':[],'anticipation':[],'disgust':[]}
for state in state_mood:
    for mood in state_mood[state]:
        emo_dict[mood].append(state_mood[state][mood])

state_df=pd.DataFrame({'State':list(most_state_count.keys()),'Geo':geo,'positive':emo_dict['positive'],'negative':emo_dict['negative'],'anger':emo_dict['anger'],'joy':emo_dict['joy'],'trust':emo_dict['trust'],'sadness':emo_dict['sadness'],'surprise':emo_dict['surprise'],'fear':emo_dict['fear'],'anticipation':emo_dict['anticipation'],'disgust':emo_dict['disgust']})

state_df.head()

geo_state=gpd.GeoDataFrame(state_df,geometry='Geo')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='anger',legend=True,cmap='Reds')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='fear',legend=True,cmap='Blues')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='joy',legend=True,cmap='Greens')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='trust',legend=True,cmap='Purples')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='sadness',legend=True,cmap='PuRd')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='anticipation',legend=True,cmap='YlOrRd')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='surprise',legend=True,cmap='BuPu')

plt.style.use('default')
plt.rcParams["figure.figsize"] = [15,10]
geo_state.plot(column='disgust',legend=True,cmap='PuBuGn')

end_time = time.time()
print("Total Execution Time: ",int((end_time-start_time)/60),"min", (int(end_time)-int(start_time))%60,"s")

"""# Hypothesis Testing and Confidence Intervals

## We will be testing to see if BJP Tweets are scored above 25 at 95% Confidence Level

### H0 : Score <= 25
### H1 : Score > 25
"""

dfhtest = df[df["Party"]=="BJP"][::300]

dfhtest = dfhtest.reset_index()
dfhtest.drop("index", axis=1, inplace = True)

dfhtest.shape

x = dfhtest["Score"]
min1 = min(x)
max1 = max(x)
norm = lambda x : (x-min1)/(max1-min1)

x_norm = [norm(i) for i in x]

#plt.plot([i for i in range(len(x_norm))],x_norm)

y = df["Score"]
min1 = min(y)
max1 = max(y)
norm = lambda x : (x-min1)/(max1-min1)
y_norm = [norm(i) for i in y]

Zalpha = 1.64
pmean = np.mean(y_norm)
smean = np.mean(x_norm)
psd = np.std(y_norm)
ssd = np.std(x_norm)
n = 75

z = (0.1-smean)/(psd/math.sqrt(n))

z

"""##### Since the calculated Z Score is greater than the critical value, it lies in the rejection region and hence H0 is rejected

## We will be testing to see if Other Party popularity is 0.05 at 95% Confidence Level

### H0 : Popularity = 0.05
### H1 : Popularity != 0.05
"""

dfhtest = df[df["Party"]=="Other"][::100]

dfhtest.shape

x = dfhtest["Positive"]
y = df["Positive"]
min1, max1 = min(x), max(x)
min2, max2 = min(y), max(y)
norm_x = lambda x : (x-min1)/(min1-max1)
norm_y = lambda x : (x-min2)/(min1-max2)
x_norm = [norm(i) for i in x]
y_norm = [norm(i) for i in y]
z = (0.05-np.mean(x_norm))/(np.std(y_norm)/math.sqrt(37))

z

"""##### Since z < 1.64, it lies in the rejection region and hence null hypothesis is rejected

# Normal Probability Plot
"""

dfhtest = df[df["Party"]=="Congress"]

dfhtest.tail()

dfhtest.shape

p = []
x = list(dfhtest["Positive"])
x = [i for i in x if i!=0.0]
x.sort()
l = len(x)
min1, max1 = min(x), max(x)
norm = lambda x : (x-min1)/(max1-min1)
x = [norm(i) for i in x]
pi = lambda i,n : (i-0.5)/n
n = len(x)
p = [pi(i,n) for i in range(1,l+1)]

Zscores = scipy.stats.zscore(p)

plt.scatter(x,Zscores)

"""# Chi Squared Test

### Testing Chi Squared Statistic for Polarity
"""

dfchi = pd.DataFrame({"Positive":df["Positive"],"Negative":df["Negative"],"Neutral":df["Neutral"]})

dfchi.tail()

rowSum = dfchi.sum(axis = 1, skipna = True) 
colSumPos = sum(dfchi["Positive"])
colSumNeu = sum(dfchi["Neutral"])
colSumNeg = sum(dfchi["Negative"])
total = 39874

f_expected_pos = colSumPos/total
f_expected_neu = colSumNeu/total
f_expected_neg = colSumNeg/total

chi = scipy.stats.chisquare(dfchi["Positive"],[f_expected_pos for i in range(0,39874)])

chi

chi2 = 0
for i in range(0,39874):
    chi2 += ((dfchi["Positive"][i]-f_expected_pos)**2)/f_expected_pos
    chi2 += ((dfchi["Negative"][i]-f_expected_neg)**2)/f_expected_neg
    chi2 += ((dfchi["Neutral"][i]-f_expected_neu)**2)/f_expected_neu

chi2

p = scipy.stats.chi2.cdf(chi2,(39873*2))

p

chitest = dfchi.values
chi2 = scipy.stats.chi2_contingency(chitest)

chi2

"""##### Since p < 0.1, we reject the null hypothesis which states that there is no relation between the three columns"""

